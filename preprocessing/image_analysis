#!/usr/bin/env python2

from multiprocessing import Process, Queue
from sys    import argv
from glob   import glob
from PIL    import Image
from time   import time
from json   import dump, dumps
from pandas import DataFrame

def loadData(category, img, all_img_data):
	print 'loaded', img[35:-4], 'from class', category 
	all_img_data.put(list(Image.open(img).getdata()))
	
def dataframeify(train, test):
	df_train = DataFrame.from_dict(train)
	df_test  = DataFrame.from_dict(test)
	with open('training_data.csv', 'w') as train_file:
		df_train.to_csv(train_file)
	with open('testing_data.csv', 'w')  as test_file:
		df_test.to_csv(test_file)

def main(args):
#class Loader:
	'''
	'''
	if args:
		print 'Using args:', args, 'lolright'	

	train_data    = dict.fromkeys(['c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9'], dict())
	test_data     = dict()
	train_data_q  = Queue()	
	test_data_q   = Queue()	

	for category in glob('/home/jared/CarHawk/train/*'): 
		for img_file in glob(category + '/*'):
			image_loader = Process(target=loadData, args=(category[-2:], img_file, train_data_q))
			t1 = time()
			image_loader.start()
			train_data[category[-2:]][img_file[32:-4]] = train_data_q.get()			
			#with open('/home/drivers/CarHawk/preprocessing/' + category[-2:] + '/' + img_file[35:-4] + '.txt', 'w') as img_txt:
			#	for rgb in train_data_q.get():
			#		for val in rgb:
			#			img_txt.write(str(val) + ',')
			#		img_txt.write('\n')
			image_loader.join() # wait till process is finished by blocking the calling thread until the image_loader terminates
			t2 = time()
			print 'walltime:', t2 - t1
	for img_file in glob('/home/jared/CarHawk/test/*'):
		image_loader = Process(target=loadData, args=('test', img_file, test_data_q))
    		image_loader.start()
		test_data[img_file[31:-4]] = test_data_q.get() 
    		image_loader.join()
	print 'All data loaded!'
	print 'training shape:', train_data.shape()  
	print 'testing shape:',  test_data.shape()  
	print 'image shape:',    training_data[0][2].shape()
	print 'random pixel:',   training_data[0][2][random.randint(len(training_data[0][2]))]
	
	print 'generating dataframe...'
	dataframeify(train_data, test_data)


if __name__=='__main__': main(argv[1:]) 

